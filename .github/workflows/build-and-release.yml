name: Build and Release

on:
  workflow_dispatch:
    inputs:
      build_mode:
        description: Build mode
        type: choice
        required: true
        default: build and release
        options:
          - build and release
          - build and release (force)
          - build only
      version:
        description: Release version (e.g. 1.0.0, empty to use version from .csproj)
        required: false
        type: string
      release_name:
        description: Release name (e.g. v1.2.5, empty to generate one automatically)
        required: false
        type: string

jobs:
  build:
    name: Build
    strategy:
      matrix:
        arch:
          - x64
          - x86
    uses: ./.github/workflows/build.yml
    with:
      arch: ${{ matrix.arch }}
      version: ${{ inputs.version }}
    secrets: inherit

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write
    if: success() && (inputs.build_mode == 'build and release' || inputs.build_mode == 'build and release (force)')

    steps:
    - name: Checkout code
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

    - name: Download artifact
      uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
      with:
        path: ./artifacts
        pattern: VolumeKeeper-*

    - name: Extract artifacts
      run: |
        cd artifacts

        echo "=== Current folder (before extracting) ==="
        pwd
        ls -la
        for zip in ./*/*.zip; do mv -v "$zip" ./; done

        find . -type f -empty -print -delete -o -type d -empty -print -delete
        echo "=== Current folder (after extracting) ==="
        ls -la

    - name: Extract version
      id: version
      run: |
        version="${{ inputs.version }}"
        if [ -z "$version" ]; then
          version=$(grep '<Version>' VolumeKeeper/VolumeKeeper.csproj | sed 's/.*<Version>\(.*\)<\/Version>.*/\1/' | head -1)
        fi
        echo "Version to release: $version"
        echo "version=$version" >> $GITHUB_OUTPUT

    - name: Set release name
      id: release_name
      run: |
        release_name="${{ inputs.release_name }}"
        if [ -z "$release_name" ]; then
          release_name="v${{ steps.version.outputs.version }}"
        fi
        echo "Release name: $release_name"
        echo "release_name=$release_name" >> $GITHUB_OUTPUT

    - name: Delete existing tag and release (only forced releases)
      if: inputs.build_mode == 'build and release (force)'
      run: |
        echo "Deleting tag and release..."
        echo "Tag name: ${{ steps.release_name.outputs.release_name }}"
        gh release delete ${{ steps.release_name.outputs.release_name }} -y --cleanup-tag || true
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create release
      uses: softprops/action-gh-release@72f2c25fcb47643c292f7107632f7a47c1df5cd8 # v2.3.2
      with:
        tag_name: ${{ steps.release_name.outputs.release_name }}
        name: ${{ steps.release_name.outputs.release_name }}
        body: |
          # Downloads

          ## Installers (Recommended)
          - **VolumeKeeper-Setup-x64.exe** - Installer for 64-bit Windows
          - **VolumeKeeper-Setup-x86.exe** - Installer for 32-bit Windows

          ## Portable Versions
          - **VolumeKeeper-x64.zip** - Portable for 64-bit Windows (extract and run)
          - **VolumeKeeper-x86.zip** - Portable for 32-bit Windows (extract and run)

          # Installation
          **Installer:** Download and run the setup file for automatic installation with Start Menu shortcuts and optional auto-start
          **Portable:** Extract the zip file and run VolumeKeeper.exe - no installation required
        draft: false
        prerelease: false
        files: |
          ./artifacts/VolumeKeeper-x64.zip
          ./artifacts/VolumeKeeper-x86.zip
          ./artifacts/VolumeKeeper-Setup-x64.exe
          ./artifacts/VolumeKeeper-Setup-x86.exe
